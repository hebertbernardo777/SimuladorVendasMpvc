function percFrete(codprod:number){
        // Rota Parceiro 
        // codprod
        // Parceiro uf
        // Tipo do frete e transportadora
       
         
        if(!tipoFrete){
            return 0;
        }

        const item = tabela?.find( item => item.CODPROD === codprod);

        const rotaParceiro = rotas?.find( rot => rot.CODROTA === parceiro?.CODROTA)

        var desconto = 0;
        
                
        //Verificar outra opcao valor tbm esta como negociado
        if(transportadoraFrete === 'N - Negociado com o cliente'){
            return percFreteNegociado;
        }else{

            if(transportadoraFrete === 'R - Retira'){
                return 0;
            }

            if(transportadoraFrete === 'O - Outra Transportadora do Cliente'){
                return 0;
            }
           
            if(codprod === 12917 || codprod === 12918 || codprod === 502700 || codprod === 505000 || codprod === 507500 || codprod === 510000 ){

                if( codprod === 12917 ){
                  return rotaParceiro?.AD_TANQUE500-desconto;
                }
      
                if( codprod === 12918 ){
                  return rotaParceiro?.AD_TANQUE1000-desconto;
                }
      
                if( codprod === 502700 ){
                  return rotaParceiro?.AD_TANQUE2700-desconto;
                }
      
                if( codprod === 505000 ){
                  return rotaParceiro?.AD_TANQUE5000-desconto;
                }
      
                if( codprod === 507500 ){
                  return rotaParceiro?.AD_TANQUE7500-desconto;
                }
      
                if( codprod === 510000 ){
                  return rotaParceiro?.AD_TANQUE10000-desconto;
                }
      
      
              }

            if(item?.CODGRUPOPROD === 41900){
                return rotaParceiro?.AD_PERC_FRETE_CAIXA_TANQUE-desconto;
            }
            else {
                
                return rotaParceiro?.AD_PERC_FRETE-desconto;
            }

        }
    };


    import { React, useState, useContext, useEffect } from "react";
import { ErrorMessage, Field, Form, Formik } from "formik";
import { Link, useNavigate } from "react-router-dom";
import { api } from "../../lib/products";
import { AuthContext } from "../../context/AuthContext";
import Button from "../../components/Button/Button";
import Search from "../../components/Search/Search";
import * as Yup from "yup";
import "./CategoryProducts.css";

const CategoryProducts = () => {
  const {
    data,
    setData,
    selectedCategory,
    setSelectedCategory,
    selectedSubCategory,
    setSelectedSubCategory,
    selectedProduct,
    setSelectedProduct,
    letterInitial,
    setLetterInitial,
    loading,
    setLoading,
  } = useContext(AuthContext);

  const [search, setSearch] = useState("");
  const [posts, setPosts] = useState([]);
  const navigate = useNavigate();

  useEffect(() => {
    api
      .get("/")
      .then((response) => {
        setPosts(response.data);
        setLoading(false);
      })
      .catch((err) => {
        console.log(err.toJSON());
        setLoading(false);
      });
  }, []);

  if (loading) return <p>carregando</p>;

  const rows = posts.rows || [];

  const categories = Object.keys(
    rows.reduce((acc, rows) => ({ ...acc, [rows.AD_SUBGRUPO]: true }), {})
  );

  const searchProducts = rows.filter((produto) =>
    produto.DESCRPROD.toUpperCase().includes(search.toUpperCase())
  );

  const filteredProducts = selectedCategory
    ? rows.filter((product) => product.AD_SUBGRUPO === selectedCategory)
    : [];

  const filterCategory = Object.keys(
    filteredProducts.reduce((acc, rows) => {
      if (rows.AD_CLASSE !== null && rows.AD_CLASSE !== undefined) {
        acc[rows.AD_CLASSE] = true; // Acessa a chave usando colchetes
      }
      return acc;
    }, {})
  );

  const filterSubCategory = selectedSubCategory
    ? rows.filter((product) => product.AD_CLASSE === selectedSubCategory)
    : filteredProducts;

  const handleSelectProducts = (setFieldValue, category) => {
    setFieldValue("category", category);
    setSelectedCategory(category);
    setLetterInitial(category.charAt(0).toUpperCase());
  };

  const handleCategoryChange = (setFieldValue, product) => {
    setFieldValue("subCategory", product);
    setSelectedSubCategory(product);
  };

  const handdleProductSelected = (product) => {
    setSelectedProduct(product);
    console.log(product);
    console.log("selectedProduct:", selectedProduct);
  };
  
  const handleSubmit = (values) => {
    console.log("Form values on submit:", values);
    setData({ ...data, ...values });
    navigate("/products");
  };


  return (
    <>
      <div className="container-category">
        <Formik
          initialValues={data}
          validationSchema={Yup.object({
            searchProduct: Yup.string(),
            category: Yup.string().required("Requerido"),
            subCategory: Yup.string().required("Requerido"),
          })}
          onSubmit={handleSubmit}
        >
          {({ setFieldValue, values }) => (
            <Form className="form-category-product">
              <h1>Produtos</h1>
              <div className="search-products">
                <Search
                  type="search"
                  name="searchProduct"
                  placeholder="Procurar produto"
                  value={search}
                  onChange={(e) => setSearch(e.target.value)}
                />
              </div>
              <div className="select-products">
                <Field
                  as="select"
                  name="category"
                  id="category"
                  onChange={(e) =>
                    handleSelectProducts(setFieldValue, e.target.value)
                  }
                >
                  <option value="">TODOS</option>
                  {categories.map((category) => (
                    <option key={category} value={category}>
                      {category}
                    </option>
                  ))}
                </Field>
                <ErrorMessage
                  name="category"
                  component="div"
                  className="errors"
                />
              </div>
              <div className="select-subcategory">
                <Field
                  as="select"
                  name="subCategory"
                  id="subCategory"
                  onChange={(e) =>
                    handleCategoryChange(setFieldValue, e.target.value)
                  }
                >
                  <option value="">TODOS</option>
                  {filterCategory.map((classe) => (
                    <option key={classe} value={classe}>
                      {classe}
                    </option>
                  ))}
                </Field>
                <ErrorMessage
                  name="subcategory"
                  component="div"
                  className="errors"
                />
              </div>
              <div className="lists-products">
                <h3 id="title-list-products">Lista Produtos</h3>
                <ul>
                  {selectedCategory && filterCategory.length > 0
                    ? filterSubCategory.map((product) => (
                        <div className="lists-container" key={product.CODPROD}>
                          <div className="lists">
                            <span>{letterInitial}</span>
                          </div>
                          <li
                            onClick={() => {
                              handdleProductSelected(product);
                            }}
                          >
                            {product.DESCRPROD}
                          </li>
                        </div>
                      ))
                    : searchProducts.map((product) => (
                        <li key={product.CODPROD}>{product.DESCRPROD}</li>
                      ))}
                </ul>
              </div>

              <div className="btn-steps">
                <Link to="/orders">
                  <Button className="btn" type="Button" children={"voltar"} />
                </Link>
                <Button className="btn" type="Submit" children={"AvanÃ§ar"} />
              </div>
            </Form>
          )}
        </Formik>
      </div>
    </>
  );
};

export default CategoryProducts;
